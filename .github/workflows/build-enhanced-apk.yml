name: Build Enhanced APK (Functional App)

on:
  workflow_dispatch:
  push:
    branches: [ notrealbranch ]
    paths: 
      - 'package.enhanced.json'
      - 'EnhancedApp.js'
      - '.github/workflows/build-enhanced-apk.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools: '34.0.0'
        ndk-version: '25.1.8937393'
        
    - name: Setup enhanced dependencies
      run: |
        # Backup original files
        cp package.json package.json.backup
        cp App.js App.js.backup || echo "No App.js to backup"
        
        # Use enhanced versions
        cp package.enhanced.json package.json
        cp EnhancedApp.js App.js
        
    - name: Install enhanced dependencies
      run: |
        npm cache clean --force
        rm -rf node_modules package-lock.json
        npm install --legacy-peer-deps
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-enhanced-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-enhanced-
          
    - name: Setup Gradle Wrapper
      working-directory: android
      run: |
        # Check if gradlew exists
        if [ ! -f "gradlew" ]; then
          echo "gradlew not found, generating wrapper"
          gradle wrapper
        fi
        
        # Make it executable
        chmod +x gradlew || echo "chmod failed"
        ls -la gradlew
        
        # Clean gradle cache to avoid version conflicts
        ./gradlew clean || echo "Initial clean failed"
        
    - name: Build enhanced APK (with full scan)
      working-directory: android
      run: |
        ls -la
        chmod +x gradlew || echo "chmod failed"
        
        # Configure Gradle to avoid deprecation issues and disable scan
        mkdir -p ~/.gradle
        echo "org.gradle.daemon=false" >> ~/.gradle/gradle.properties
        echo "org.gradle.configureondemand=true" >> ~/.gradle/gradle.properties
        echo "org.gradle.parallel=true" >> ~/.gradle/gradle.properties
        echo "org.gradle.caching=true" >> ~/.gradle/gradle.properties
        echo "org.gradle.warning.mode=all" >> ~/.gradle/gradle.properties
        
        # Full diagnostic scan
        echo "=== GRADLE VERSION SCAN ==="
        ./gradlew --version
        
        echo "=== JAVA VERSION SCAN ==="
        java -version
        javac -version
        
        echo "=== ANDROID SDK SCAN ==="
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        ls -la $ANDROID_HOME/build-tools/ || echo "No build-tools found"
        
        echo "=== PROJECT DEPENDENCIES SCAN ==="
        ./gradlew dependencies --configuration debugCompileClasspath || echo "Dependencies scan failed"
        
        echo "=== BUILD CONFIGURATION SCAN ==="
        cat app/build.gradle | grep -A 10 -B 10 "compileSdk\|targetSdk\|minSdk" || echo "No SDK config found"
        
        echo "=== KOTLIN VERSION SCAN ==="
        cat build.gradle | grep kotlin || echo "No kotlin version found"
        
        echo "=== STARTING BUILD WITH WARNING MODE ==="
        ./gradlew clean assembleDebug --no-daemon --stacktrace --info --warning-mode all
      
    - name: Upload Enhanced APK
      uses: actions/upload-artifact@v4
      with:
        name: jamvis-enhanced-apk
        path: android/app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30
        
    - name: Restore original files
      run: |
        # Restore backups
        cp package.json.backup package.json || echo "No backup to restore"
        cp App.js.backup App.js || echo "No App.js backup to restore"
      if: always()
